// Copyright 2016 - 2023 Simon Klarmann <simon.klarmann@gmail.com>
//
// SPDX-License-Identifier: BSD-3-Clause



#pragma once

#include <datatypes.h>
#include <forwarddeclaration.h>

#include <ostream>
#include <vector>

namespace HierAMuS {
    /**
 * @class EquationHandler
 * @brief Groups nodeSets and dofHandler for further management of the equation
 * system.
 */

class EquationHandler {
public:
  explicit EquationHandler();
  ~EquationHandler();
  auto requestNodeSetSetup(indexType setCollectionIndex, indexType meshID,
                           bool &alreadyInitialized) -> indexType;
  /**
   * @brief Request a node set collection.
   * @param numberOfSets Specifies the number of node sets.
   * @return Returns the storage number of the node set collection to
   * identify the set collection later on.
   */
  // auto requestNodeSets(indexType numberOfSets) -> indexType;
  auto getNumberOfNodeSets(indexType setCollectionIndex) -> indexType;
  /**
   * @brief Returns a pointer to a node set.
   * @param setCollectionIndex Index of the node sets, generated by
   * requestNodeSets.
   * @param setNumber Offset to the number of the node set, first node set
   * in the group has index 0.
   * @return Returns the selected node set.
   */
  auto getSet(indexType setCollectionIndex, indexType setNumber) -> NodeSet *;
  /**
   * @brief Returns a pointer to a node set.
   * @param setCollectionIndex Index of the node sets, generated by
   * requestNodeSets.
   * @param setNumber Offset to the number of the node set, first node set
   * in the group has index 0.
   * @return Returns the selected node set.
   */
  auto getSetMeshId(indexType setCollectionIndex, indexType meshId)
      -> NodeSet *;
  auto getNode(const NodeSet &nodeSet, indexType node) -> GenericNodes *;
  /**
   * @brief Sets up a vector with node set pointer.
   * @param nodeSets Vector of pointer to the node sets. Will be set up on
   * call.
   * @param setCollectionIndex Storage index of the set collection.
   * @param setSize The size of the set collection.
   */
  void getSets(std::vector<NodeSet *> &nodeSets, indexType setCollectionIndex,
               indexType setSize);
  /**
   * @brief Sets up a vector with node set pointer.
   * @param[in] setCollectionIndex Storage index of the set collection.
   * @param[in] setSize The size of the set collection.
   * @return std::vector<NodeSet *> Vector of pointer to the node sets. Will be
   * set up on call.
   */
  auto getSets(indexType setCollectionIndex, indexType setSize)
      -> std::vector<NodeSet *>;
  /**
   * @brief Sets up a vector with pointers to nodes associated with a
   * nodeset.
   * @param[out] nodes Vector of GenericNodes pointers.
   * @param[in] setCollectionIndex Storage index of the set collection.
   * @param[in] setNumber The set number of which the nodes are selected,
   * does not necessarily equal the meshid.
   */
  void getNodes(std::vector<GenericNodes *> &nodes,
                indexType setCollectionIndex, indexType setNumber);
  /**
   * @brief Sets up a vector with pointers to nodes associated with a
   * nodeset.
   * @param[in] setCollectionIndex Storage index of the set collection.
   * @param[in] setNumber The set number of which the nodes are selected,
   * does not necessarily equal the meshid.
   * @return std::vector<GenericNodes *> Vector of GenericNodes pointers.
   */
  auto getNodes(indexType setCollectionIndex, indexType setNumber)
      -> std::vector<GenericNodes *>;
  /**
   * @brief Sets up a vector with pointers to nodes associated with a
   * nodeset.
   * @param[out] nodes Vector of GenericNodes pointers.
   * @param[in] Nodeset The NodeSet of which the GenericNodes will be
   * returned.
   */
  void getNodes(std::vector<GenericNodes *> &nodes, const NodeSet &Nodeset);
  /**
   * @brief Sets up a vector with pointers to nodes associated with a
   * nodeset.
   * @param[in] Nodeset The NodeSet of which the GenericNodes will be
   * returned.
   * @return std::vector<GenericNodes *> Vector of GenericNodes pointers.
   */
  auto getNodes(const NodeSet &Nodeset) -> std::vector<GenericNodes *>;

  void update();
  void updateEquations(); // TODO
  void print(PointerCollection& pointers);

  void initSolutionState(PointerCollection &pointers);

  auto getNumberOfTotalEquations() -> indexType;
  auto getNumberOfActiveEquations() -> indexType;
  auto getNumberOfInActiveEquations() -> indexType;

  auto getDegreeOfFreedom(indexType dofId) -> DegreeOfFreedom &;
  auto getNumberOfNodes() -> indexType;
  auto getNode(indexType globalNodeNumber) -> GenericNodes &;


private:
  std::vector<indexType> m_nodesetCompressedIndex;
  std::vector<NodeSet> m_nodeSetList;
  indexType m_currNodeSets;

  indexType m_currNodes;
  std::vector<indexType> m_nodesIndex;
  std::vector<GenericNodes> m_nodes;
  

  indexType m_activeIds;
  indexType m_inActiveIds;
  indexType m_totalIds;
};

} /* namespace HierAMuS */
